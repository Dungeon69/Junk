import cryptoJs from "crypto-js";

const secretkey = "lh+V!G9I=g^AwN!^[";
// const iv = "00d0b4ae362e965b6b4829fe58f0346e";
const format = {
  stringify: function (wordArray) {
    try {
      return decodeURIComponent(escape(Latin1.stringify(wordArray)));
    } catch (e) {
      throw new Error("Malformed UTF-8 data");
    }
  },
  parse: function (utf8Str) {
    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
  },
};
const encrypted =
  "";
let wordArray = cryptoJs.enc.Base64.parse(encrypted);
let iv = cryptoJs.lib.WordArray.create(wordArray.words.slice(0, 4));
let ciphertext = cryptoJs.lib.WordArray.create(wordArray.words.slice(4));
const crypto = cryptoJs.AES.decrypt(
  {
    ciphertext: ciphertext,
  },
  cryptoJs.enc.Hex.parse(cryptoJs.SHA256(secretkey).toString()),
  {
    iv: iv,
  }
);

console.log(crypto.toString(cryptoJs.enc.Utf8));

// [ 158 ] lib
// [ 161 ] create
// [ 162 ] words
// [ 163 ] slice
// [ 155 ] enc
// [ 157 ] parse
// [ 162 ] words
// [ 163 ] slice
// [ 165 ] AES
// [ 165 ] AES
// [ 166 ] decrypt
